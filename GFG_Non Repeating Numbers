Given an array A containing 2*N+2 positive numbers, out of which 2*N numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return in increasing order.

Example 1:

Input: 
N = 2
arr[] = {1, 2, 3, 2, 1, 4}
Output:
3 4 
Explanation:
3 and 4 occur exactly once.
Example 2:

Input:
N = 1
arr[] = {2, 1, 3, 2}
Output:
1 3
Explanation:
1 3 occur exactly once.
Your Task:
You do not need to read or print anything. Your task is to complete the function singleNumber() which takes the array as input parameter and returns a list of two numbers which occur exactly once in the array. The list must be in ascending order.

Expected Time Complexity: O(N)
Expected Space Complexity: O(1)

Constraints:
1 <= length of array <= 106 
1 <= Elements in array <= 5 * 106


link - https://practice.geeksforgeeks.org/problems/finding-the-numbers0215/1

---------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    public int[] singleNumber(int[] nums)
    {
        HashMap<Integer, Integer> mp = new HashMap<>();
        
        for(int i=0 ;i<nums.length; i++){
            mp.put(nums[i], mp.getOrDefault(nums[i], 0)+1);
        }
        
        ArrayList<Integer> ll = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : mp.entrySet()){
            if(entry.getValue()==1){
                ll.add(entry.getKey());
            }
        }
        
        int[] res = new int[ll.size()];
        for(int i=0; i<ll.size(); i++){
            res[i] = ll.get(i);
        }
        
        Arrays.sort(res);
        
        return res;
    }
}
