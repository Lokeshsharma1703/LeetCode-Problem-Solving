Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.
Note:

You have to return the list in sorted order.
The tree will not contain duplicate values.
Example 1:

Input:      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14
Target Node = 8
K = 2
Output: 10 14 22
Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.

Example 2:

Input:      
         20
       /    \
      7      24
    /   \
   4     3
        /  
       1    
Target Node = 7
K = 2
Output: 1 24
Your Task:  
You don't need to read input or print anything. Complete the function KDistanceNodes() which takes the root of the tree, target, and K as input parameters and returns a list of nodes at k distance from target in a sorted order.

Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(Height of tree)

Constraints:
1 ≤ N ≤ 105
1 ≤ data of node ≤ 109
1 ≤ target ≤ 109
1 ≤ k ≤ 20


link - https://practice.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1

----------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        HashMap<Node, Node> mp = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            Node temp = q.poll();
            
            if(temp.left != null){
                mp.put(temp.left, temp);
                q.add(temp.left);
            }
            
            if(temp.right != null){
                mp.put(temp.right, temp);
                q.add(temp.right);
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        HashMap<Node, Integer> visited = new HashMap<>();
        q = new LinkedList<>();
        Node node = search(root, target);
        q.add(node);
        visited.put(node, 0);
        
        while(!q.isEmpty()){
            Node temp = q.poll();
            
            if(temp.left != null && !visited.containsKey(temp.left)){
                Node lft = temp.left;
                q.add(lft);
                visited.put(lft, visited.get(temp)+1);
                if(visited.get(lft) == k){
                    res.add(lft.data);
                }
            }
            
            if(temp.right != null && !visited.containsKey(temp.right)){
                Node rgt = temp.right;
                q.add(rgt);
                visited.put(rgt, visited.get(temp)+1);
                if(visited.get(rgt) == k){
                    res.add(rgt.data);
                }
            }
            
            if(mp.containsKey(temp) && !visited.containsKey(mp.get(temp))){
                Node parent = mp.get(temp);
                q.add(parent);
                visited.put(parent, visited.get(temp)+1);
                if(visited.get(parent) == k){
                    res.add(parent.data);
                }
            }
        }
        
        Collections.sort(res);
        return res;
    }
    
    public static Node search(Node root, int val){
        if(root == null){
            return null;
        }
        
        if(root.data == val){
            return root;
        }
        
        Node lft = search(root.left, val);
        Node rgt = search(root.right, val);
        
        return lft == null ? rgt : lft;
    }
};
