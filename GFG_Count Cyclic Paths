Given a triangular pyramid with its vertices marked as O, A, B and C and a number N, the task is to find the number of ways such that a person starting from the origin O initially, reaches back to the origin in N steps. In a single step, a person can go to any of its adjacent vertices.

Lightbox


Example 1:

Input:
N = 1
Output: 0
Explanation: The minimum length of
a cyclic path is 2.
Example 2:

Input:
N = 2
Output: 3
Explanation: The three paths are :
O-A-O, O-B-O, O-C-O

Your Task:  
You don't need to read input or print anything. Your task is to complete the function countPaths() which takes an integer N as input parameter and returns the number of possible paths. Since the answer may be big, return it modulo (10^9+7). 


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N ≤ 106


link - https://practice.geeksforgeeks.org/problems/aa0000a5f710ce8d41366b714341eef644ec7b82/1


------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution{
	public static int countPaths(int N){
		int[][] dp = new int[N+1][4];
		
		dp[0][0] = 1;
		int prev = 1;
		for(int i=1;i<=N;i++){
		    int curr = 0;
		    for(int j=0;j<4;j++){
		        dp[i][j] = sub(prev, dp[i-1][j]);
		        curr = add(curr, dp[i][j]);
		    }
		    prev = curr;
		}
		return dp[N][0];
	}
	
	private static int add(int a, int b){
	    return (a+b)%(1000000007);
	}
	
	private static int sub(int a, int b){
	    return (1000000007 + a - b)%(1000000007);
	}
}
