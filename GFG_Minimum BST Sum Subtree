Given a binary tree and a target, find the number of node in the minimum sub-tree with the given sum equal to the target which is also a binary search tree.

Example 1:

Input:
           13
         /    \
       5       23
      / \      / \
     N   17   N   N
         /
        16
Target: 38
Output: 3
Explanation: 5,17,16 is the smallest subtree
with length 3.
 

Example 2:

Input:
             7
           /   \
          N    23
             /   \
            10    23
           /  \   / \
          N   17 N   N
Target: 73
Output: -1
Explanation: No subtree is bst for the given target.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function minSubtreeSumBST() which takes the tree root and target as input parameters which is a binary Tree and returns the length of the minimum subtree having a sum equal to the target but which is a binary search tree.

Expected Time Complexity: O(N), where N is no. of nodes
Expected Space Complexity: O(h), where h is the height of the tree

Constraints:
1 <= N <= 10^5


link - https://practice.geeksforgeeks.org/problems/d064cc0468a5c2bb7817ecd7c1bc59ce25e23613/1

---------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    
    int res = Integer.MAX_VALUE;
    
    public int minSubtreeSumBST(int target, Node root) {
        findMinSubtree(target, root);
        return res==Integer.MAX_VALUE ? -1 : res;
    }
    
    class Pair{
        int sum;
        int size;
        int min;
        int max;
        public Pair(int sum, int size, int min, int max){
            this.sum = sum;
            this.size = size;
            this.min = min;
            this.max = max;
        }
    }
    
    private Pair findMinSubtree(int target, Node root){
        if(root==null){
            return new Pair(0, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);
        }
        
        Pair lft = findMinSubtree(target, root.left);
        Pair rgt = findMinSubtree(target, root.right);
        
        int curr = root.data + lft.sum + rgt.sum;
        
        if(root.data > lft.max && root.data < rgt.min){
            if(target == curr){
                res = Math.min(res, 1 + lft.size + rgt.size);
            }
            return new Pair(curr, 1+lft.size+rgt.size, Math.min(lft.min, root.data), Math.max(rgt.max, root.data));
        }
        
        return new Pair(0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
}
