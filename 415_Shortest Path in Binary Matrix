class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        if(grid[0][0] == 1 || grid[n-1][m-1] == 1){
            return -1;
        }

        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0, 1});

        grid[0][0]=1;

        int[] row = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] col = {-1, 0, 1, -1, 1, -1, 0, 1};

        while(!q.isEmpty()){
            int[] rem = q.poll();
            int r = rem[0];
            int c = rem[1];
            int dis = rem[2];

            if(r==n-1 && c==m-1){
                return dis;
            }

            for(int i=0;i<8;i++){
                int ni = r + row[i];
                int nc = c + col[i];

                if(ni >= 0 && ni < n && nc >= 0 && nc < m && grid[ni][nc]==0){
                    grid[ni][nc] = 1;
                    q.offer(new int[]{ni, nc, dis+1});
                }
            }
        }

        return -1;
    }
}
