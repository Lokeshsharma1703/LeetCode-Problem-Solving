/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<TreeNode> parent = new LinkedList<>();
        Queue<TreeNode> child = new LinkedList<>();

        List<Integer> temp = new ArrayList<>();
        if(root != null){
            parent.offer(root);
        }
        while(!parent.isEmpty()){
            TreeNode curr = parent.poll();

            if(curr.left != null){
                child.offer(curr.left);
            }
            if(curr.right != null){
                child.offer(curr.right);
            }

            temp.add(curr.val);

            if(parent.isEmpty()){
                res.add(new ArrayList<>(temp));
                parent = child;
                child = new LinkedList<>();
                temp = new ArrayList<>();
            }
        }

        Collections.reverse(res);
        return res;
    }
}
