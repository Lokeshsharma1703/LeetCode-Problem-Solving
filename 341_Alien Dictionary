class Solution
{
    public String findOrder(String [] dict, int N, int K){
        HashMap<Character, List<Character>> map = new HashMap<>();
        for(int i=0;i<K; i++){
            map.put((char)(i+'a'), new ArrayList<>());
        }
        
        for(int i=0;i<N-1;i++){
            String s1 = dict[i];
            String s2 = dict[i+1];
            if(s1.startsWith(s2) && s1.length() > s2.length()){
                return "";
            } 
            
            for(int j=0;j<Math.min(s1.length(), s2.length()); j++){
                if(s1.charAt(j) != s2.charAt(j)){
                    map.get(s1.charAt(j)).add(s2.charAt(j));
                    break;
                }
            }
        }
        
        return topologicalSort(map);
    }
    
    private static String topologicalSort(HashMap<Character, List<Character>> map){
        int[] in = indegree(map);
        Queue<Character> q = new LinkedList<>();
        
        for(char ch : map.keySet()){
            if(in[ch-'a']==0){
                q.offer(ch);
            }
        }
        
        int count = 0;
        StringBuilder sb = new StringBuilder();
        
        while(!q.isEmpty()){
            char ch = q.poll();
            count++;
            sb.append(ch);
            for(char ngbr : map.get(ch)){
                in[ngbr-'a']--;
                if(in[ngbr-'a']==0){
                    q.offer(ngbr);
                }
            }
        }
        
        return count==map.size() ? sb.toString() : "";
    }
    
    private static int[] indegree(HashMap<Character, List<Character>> map){
        int[] in = new int[26];
        for(char key : map.keySet()){
            for(char ngbr : map.get(key)){
                in[ngbr-'a']++;
            }
        }
        
        return in;
    }
}
