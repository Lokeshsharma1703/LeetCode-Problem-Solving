class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> list = new HashSet<>();
        HashMap<Integer, Integer> mp = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            mp.put(nums1[i], mp.getOrDefault(nums1[i], 0)+1);
        }

        for(int i=0;i<nums2.length;i++){
            if(mp.containsKey(nums2[i]) && mp.get(nums2[i])>0){
                list.add(nums2[i]);
                mp.put(nums2[i], mp.get(nums2[i])-1);
            }
        }

        int[] res = new int[list.size()];
        int i=0;
        for(int ele : list){
            res[i++] = ele;
        }

        return res;
    }
}

----------------------------------------------------------------------------------------------

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> res = new HashSet<>();
        int i=0;
        int j=0;
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]<nums2[j]){
                i++;
            }
            else if(nums2[j]<nums1[i]){
                j++;
            }
            else if(nums1[i]==nums2[j]){
                res.add(nums1[i]);
                i++;
                j++;
            }
        }
        return res.stream().mapToInt(Integer::intValue).toArray();
    }
}
