class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        int i=0;
        int j = costs.length-1;

        PriorityQueue<Integer> pq1 = new PriorityQueue<>();
        PriorityQueue<Integer> pq2 = new PriorityQueue<>();

        long res = 0;

        while(k-- > 0){
            while(pq1.size() < candidates && i<=j){
                pq1.add(costs[i++]);
            }
            while(pq2.size() < candidates && i<=j){
                pq2.add(costs[j--]);
            }

            int val1 = pq1.size() > 0 ? pq1.peek() : Integer.MAX_VALUE;
            int val2 = pq2.size() > 0 ? pq2.peek() : Integer.MAX_VALUE;

            if(val1 <= val2){
                res += val1;
                pq1.poll();
            }
            else{
                res += val2;
                pq2.poll();
            }
        }

        return res;
    }
}
