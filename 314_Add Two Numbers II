/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode n1 = reverse(l1);
        ListNode n2 = reverse(l2);
        return addNumbers(n1, n2);
    }

    private ListNode addNumbers(ListNode n1, ListNode n2){
        ListNode node = null;
        int c = 0;
        while(n1 != null && n2 != null){
            int d = n1.val + n2.val + c;
            ListNode nn = new ListNode(d%10);
            c = d/10;
            nn.next = node;
            node = nn;
            n1 = n1.next;
            n2 = n2.next;
        }
        while(n1 != null){
            int d = c + n1.val;
            ListNode nn = new ListNode(d%10);
            c = d/10;
            nn.next = node;
            node = nn;
            n1 = n1.next;
        }
        while(n2 != null){
            int d = c + n2.val;
            ListNode nn = new ListNode(d%10);
            c = d/10;
            nn.next = node;
            node = nn;
            n2 = n2.next;
        }
        if(c>0){
            ListNode nn = new ListNode(c);
            nn.next = node;
            node = nn;
        }
        return node;
    }

    private ListNode reverse(ListNode node){
        ListNode prev = null;
        ListNode curr = node;
        ListNode ahead = null;
        while(curr != null){
            ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        node = prev;
        return node;
    }
}
