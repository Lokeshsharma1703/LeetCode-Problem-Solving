class Solution {
    public int orangesRotting(int[][] grid) {
        int fresh = 0;
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int n = grid.length;
        int m = grid[0].length;

        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.offer(new int[] { i, j });
                }
                if (grid[i][j] != 0) {
                    fresh++;
                }
            }
        }

        if (fresh == 0) {
            return 0;
        }

        int min = 0;
        int count = 0;

        int[] r = { -1, 1, 0, 0 };
        int[] c = { 0, 0, -1, 1 };

        while (!q.isEmpty()) {
            int size = q.size();
            count += size;
            for (int i = 0; i < size; i++) {
                int[] point = q.poll();
                for (int j = 0; j < r.length; j++) {
                    int x = point[0] + r[j];
                    int y = point[1] + c[j];

                    if (x < 0 || y < 0 || x >= n || y >= m || grid[x][y] == 0 || grid[x][y] == 2) {
                        continue;
                    }
                    grid[x][y] = 2;
                    q.offer(new int[] { x, y });
                }
            }
            if (q.size() != 0) {
                min++;
            }
        }

        return fresh == count ? min : -1;
    }
}
