class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;

        int lft = 0;
        int rgt = 1_000_000;
        int[][] dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};

        while(lft <= rgt){
            int mid = (lft + rgt)/2;

            if(dfs(heights, 0, 0, mid, new boolean[n][m], n, m, dir)){
                rgt = mid-1;
            }
            else{
                lft = mid+1;
            }
        }

        return lft;
    }

    private boolean dfs(int[][] heights, int i, int j, int mid, boolean[][] visited, int n, int m, int[][] dir){
        if(i==n-1 && j==m-1){
            return true;
        }

        visited[i][j] = true;

        for(int[] d : dir){
            int x = i+d[0];
            int y = j+d[1];

            if(x>=0 && y>=0 && x<n && y<m && !visited[x][y]){
                if(Math.abs(heights[i][j] - heights[x][y]) <= mid && dfs(heights, x, y, mid, visited, n, m, dir)){
                    return true;
                }
            }
        }

        return false;
    }
}
