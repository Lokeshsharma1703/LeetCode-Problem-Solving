Given an array A[] of N integers and an integer M. The task is to count the number of subarrays which have median M.
Median of an array is defined as below:

1. If N is odd, the median value is the number that is in the middle after sorting the array.
2. if N is even, the median value is the left of the two middle numbers after sorting the array. 

Example 1:

Input:
N = 5, M = 2
A[] = {2, 1, 3, 5, 4}
Output: 
3
Explanation: 
The subarrays which has median equal to M
are [2], [2,1,3] and [2,1,3,5]

Example 2:

Input:
N = 1, M = 1
A[] = {1}
Output: 
1
Explanation: 
The subarrays which has median equal to M
is [1].

Your Task: 
You don't need to read input or print anything. Complete the function countSubarray( ) which takes the integer N , the array A[], and the integer M as input parameters and returns the number of subarays. 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 105
1 ≤ A[] ≤ 105
1 ≤ M ≤ N


link - https://practice.geeksforgeeks.org/problems/6f08220ca3b871be594f50f7f56a9ef2799cb485/1

-------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution 
{ 
    long countSubarray(int N, int A[], int M) 
    { 
        long odd = helper(N, A, M);
        long even = helper(N, A, M+1);
        
        return odd-even;
    }
    
    private static long helper(int N, int[] A, int M){
        HashMap<Integer, Integer> mp = new HashMap<>();
        int curr = 0;
        long total = 0;
        long res = 0;
        
        mp.put(curr, 1);
        
        for(int i=0;i<N;i++){
            int x;
            if(A[i]>=M){
                x = 1;
            }
            else{
                x = -1;
            }
            
            if(x == -1){
                total -= mp.getOrDefault(curr-1, 0);
            }
            else{
                total += mp.getOrDefault(curr, 0);
            }
            
            curr += x;
            res += total;
            mp.put(curr, mp.getOrDefault(curr, 0)+1);
        }
        return res;
    }
} 
