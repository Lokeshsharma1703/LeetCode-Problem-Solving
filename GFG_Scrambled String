Given two strings S1 and S2 of equal length, the task is to determine if S2 is a scrambled form of S1.

Scrambled string: Given string str, we can represent it as a binary tree by partitioning it into two non-empty substrings recursively.
Below is one possible representation of str = coder:
 
To scramble the string, we may choose any non-leaf node and swap its two children. 
Suppose, we choose the node co and swap its two children, it produces a scrambled string ocder.
Similarly, if we continue to swap the children of nodes der and er, it produces a scrambled string ocred.

Note: Scrambled string is not the same as an Anagram.

Print "Yes" if S2 is a scrambled form of S1 otherwise print "No".

Example 1:

Input: S1="coder", S2="ocder"
Output: Yes
Explanation: ocder is a scrambled 
form of coder.

    ocder
   /    \
  oc    der
 / \    
o   c  

As "ocder" can represent it 
as a binary tree by partitioning 
it into two non-empty substrings.
We just have to swap 'o' and 'c' 
to get "coder".
Example 2:

Input: S1="abcde", S2="caebd" 
Output: No
Explanation: caebd is not a 
scrambled form of abcde.
Your Task:
You don't need to read input or print anything. You only need to complete the function isScramble() which takes two strings S1 and S2 as input and returns a boolean value.

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N2)

Constrains: 

S1.length = S2.length
S1.length<=31
S1 and S2 consist of lower-case English letters.


link - https://practice.geeksforgeeks.org/problems/scrambled-string/1

-----------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution{
    static boolean isScramble(String S1,String S2)
    {
        int n = S1.length();
        return check(S1, S2, 0, S1.length()-1, 0, S2.length()-1, new Boolean[n][n][n][n]);
    }
    
    private static boolean check(String s1, String s2, int l1, int h1, int l2, int h2, Boolean[][][][] dp){
        if(s1.substring(l1, h1+1).compareTo(s2.substring(l2, h2+1))==0){
            return true;
        }
        
        if(dp[l1][h1][l2][h2]!=null){
            return dp[l1][h1][l2][h2];
        }
        
        boolean res = true;
        for(int i=l1, j=h2; i<=h1 && res; i++, j--){
            if(s1.charAt(i)!=s2.charAt(j)){
                res = false;
            }
        }
        
        for(int i=0;i<h1-l1 && !res; i++){
            if(check(s1, s2, l1, l1+i, l2, l2+i, dp) && check(s1, s2, l1+i+1, h1, l2+i+1, h2, dp)){
                res = true;
            }
            if(!res && check(s1, s2, l1, l1+i, h2-i, h2, dp) && check(s1, s2, l1+i+1, h1, l2, h2-i-1, dp)){
                res = true;
            }
        }
        return dp[l1][h1][l2][h2] = res;
    }
}
