/*
 * @lc app=leetcode id=76 lang=java
 *
 * [76] Minimum Window Substring
 */

// @lc code=start
class Solution {
    public String minWindow(String s, String t) {
        String res = "";
        int n = s.length();
        int m = t.length();
        int[] freq1 = new int[256];
        int[] freq2 = new int[256];
        int si = 0;
        int len = n + 1;
        int count = 0;
        for (int i = 0; i < m; i++) {
            freq1[t.charAt(i)]++;
        }
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            freq2[ch]++;
            if (freq1[ch] != 0 && freq2[ch] <= freq1[ch]) {
                count++;
            }
            if (count == m) {
                while (freq2[s.charAt(si)] > freq1[s.charAt(si)] || freq1[s.charAt(si)] == 0) {
                    if (freq2[s.charAt(si)] > freq1[s.charAt(si)]) {
                        freq2[s.charAt(si)]--;
                    }
                    si++;
                }
                if (len > i - si + 1) {
                    len = i - si + 1;
                    res = s.substring(si, si + len);
                }
            }
        }
        return res;
    }
}
// @lc code=end
