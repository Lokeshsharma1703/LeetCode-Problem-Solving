Given a string S. In one operation, you can remove the substring "pr" from the string S and get amount X or you can remove the substring "rp" and get the amount Y. 
Find the maximum amount you can get if you perform zero or more such operations optimally. 

Note : 

Substring of a string S is defined as a continuous sequence of characters in S.
After removing pr or rp, the order of remaining letters should remain the same.

Example 1:

Input:
X = 5, Y = 4
S = "abppprrr"
Output: 15
Explanation: 
Here, S = "abppprrr" 
X= 5, Y=4.
Remove "pr", new string S = "abpprr".
Remove "pr", new string S = "abpr".
Remove "pr", new string S = "ab".
In total, we removed "pr" 3 times, 
so total score is 3*X + 0*Y = 3*5 =15.
 

 

Example 2:

Input:
X = 7, Y = 7
S = "prpptppr"
Output: 14
Explanation: 
Here, S = "prpptppr" 
X= 7, Y=7.
As both have the same amount we can first 
remove either pr or rp. Here we start with pr
Remove "pr", new string S = "pptppr".
Remove "pr", new string S = "pptp".
In total, we removed "pr" 2 times, 
so total score is 2*X + 0*Y = 2*7 =14.

Your Task: 
You don't need to read input or print anything. Your task is to complete the function solve() which takes the X ,Y and string S as input parameters and returns the maximum amount you can get after performing the above operations.


Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(|S|)


Constraints:
1 ≤ |S| ≤ 105
1 ≤ X,Y ≤ 105
S contains lowercase English letters only.


link - https://practice.geeksforgeeks.org/problems/d25f415de2ff3e02134de03e17ad019d723ab2e9/1

---------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution 
{ 
    static long solve(int X,int Y, String S)
	{    
	    long[] ele;
	    if(X>Y){
	        ele = helper('p', 'r', S);
	    }
	    else{
	        ele = helper('r', 'p', S);
	    }
	    
	    return ele[0]*X + ele[1]*Y;
	}
	
	private static long[] helper(char a, char b, String s){
	    Stack<Character> s1 = new Stack<>();
	    Stack<Character> s2 = new Stack<>();
	    
	    long count1 = 0;
	    long count2 = 0;
	    
	    s1.push(s.charAt(0));
	    char temp = s.charAt(0);
	    
	    for(int i=1;i<s.length();i++){
	        if(!s1.isEmpty() && s.charAt(i)==b && s1.peek()==a){
	            s1.pop();
	            count1++;
	        }
	        else{
	            s1.add(s.charAt(i));
	        }
	    }
	    
	    s2.add(s1.pop());
	    temp = s2.peek();
	    
	    while(!s1.isEmpty()){
	        if(!s2.isEmpty() && s1.peek()==b && s2.peek()==a){
	            count2++;
	            s2.pop();
	        }
	        else{
	            s2.add(s1.peek());
	        }
	        s1.pop();
	    }
	    
	    if(a=='p'){
	        return new long[]{count1, count2};
	    }
	    return new long[]{count2, count1};
	}
} 
