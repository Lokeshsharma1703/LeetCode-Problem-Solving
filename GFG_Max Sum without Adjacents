Given an array Arr of size N containing positive integers. Find the maximum sum of a subsequence such that no two numbers in the sequence should be adjacent in the array.

Example 1:

Input:
N = 6
Arr[] = {5, 5, 10, 100, 10, 5}
Output: 110
Explanation: If you take indices 0, 3
and 5, then Arr[0]+Arr[3]+Arr[5] =
5+100+5 = 110.
 

Example 2:

Input:
N = 4
Arr[] = {3, 2, 7, 10}
Output: 13
Explanation: 3 and 10 forms a non
continuous  subsequence with maximum
sum.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findMaxSum() which takes the array of integers arr and n as parameters and returns an integer denoting the answer. It is guaranteed that your answer will always fit in the 32-bit integer.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 ≤ N ≤ 106
1 ≤ Arri ≤ 107


link - https://practice.geeksforgeeks.org/problems/7a33c749a79327b2889d420dd80342fff33aac6d/1

------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
    int findMaxSum(int arr[], int n) {
        int prev = 0;
        int curr = arr[0];
        
        for(int i=1;i<n;i++){
            int tempSum = Math.max(curr, prev+arr[i]);
            prev = curr;
            curr = tempSum;
        }
        return curr;
    }
}



class Solution {
    // int sum(int arr[],int n,int ind,int dp[])
    // {
    //     if(ind>=n)
    //     {
    //         return 0;
    //     }
    //     if(dp[ind]!=-1)
    //     {
    //         return dp[ind];
    //     }
    //     int pick=arr[ind]+sum(arr,n,ind+2,dp);
    //     int npick=sum(arr,n,ind+1,dp);
    //     return dp[ind]=Math.max(pick,npick);
    // }
    int findMaxSum(int arr[], int n) {
        //int dp[]=new int[n+2];
        //Arrays.fill(dp,-1);
        //return sum(arr,n,0,dp);
        //dp[n]=0;
        // for(int i=n-1;i>=0;i--)
        // {
        //     dp[i]=Math.max(dp[i+1],arr[i]+dp[i+2]);
        // }
        // dp[0]=arr[0];
        // dp[1]=arr[1];
        int curr=0;
        int prev=arr[0];
        for(int i=1;i<n;i++)
        {
            int currnow=Math.max(prev,arr[i]+curr);
            curr=prev;
            prev=currnow;
        }
        return prev;
    }
}
