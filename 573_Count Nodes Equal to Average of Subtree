/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countAverageOfSubtree = 0;
    public int averageOfSubtree(TreeNode root) {
        
        Map<TreeNode,NodeInfos> infos = new HashMap<>();
        postOrderTraversal(root,infos);


        return countAverageOfSubtree;
    }

    public void postOrderTraversal(TreeNode root, Map<TreeNode,NodeInfos> infos){
        if(root == null)return;
        postOrderTraversal(root.left, infos);
        postOrderTraversal(root.right, infos);

        int sum = root.val;
        int count = 1;
        if(root.left != null){
            NodeInfos leftNodeInfos = infos.get(root.left);
            sum += leftNodeInfos.sum;
            count += leftNodeInfos.count;
        }
        if(root.right != null){
            NodeInfos rightNodeInfos = infos.get(root.right);
            sum += rightNodeInfos.sum;
            count += rightNodeInfos.count;
        }
        final boolean checkAverage = root.val == Math.round( sum / count );
        if(checkAverage) countAverageOfSubtree++;

        infos.put(root, new NodeInfos(count,sum));
    }



    static class NodeInfos{
        int count;
        int sum;

        public NodeInfos(int count, int sum){
            this.count = count;
            this.sum = sum;
        }
    }
}

