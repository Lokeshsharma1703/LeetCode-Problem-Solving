class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>>adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] i : flights){
            adj.get(i[0]).add(new int[]{i[1], i[2]});
        }

        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{src, 0});
        int[] res = new int[n];
        Arrays.fill(res, Integer.MAX_VALUE);
        int s = 0;
        while(!q.isEmpty() && s<=k){
            int len = q.size();
            while(len-->0){
                int[] temp = q.poll();
                for(int[] item : adj.get(temp[0])){
                    int cost = item[1];
                    int nn = item[0];
                    if(cost + temp[1] >= res[nn]){
                        continue;
                    }
                    res[nn] = cost + temp[1];
                    q.offer(new int[]{nn, res[nn]});
                }
            }
            s++;
        }
        return res[dst] == Integer.MAX_VALUE ? -1 : res[dst];
    }
}
