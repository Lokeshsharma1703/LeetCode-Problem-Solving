Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

Example 1:

Input:
N = 16
A = {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15}
Output: 
6
Explanation:
There are more than one LIS in this array. One such Longest increasing subsequence is {0,2,6,9,13,15}.
Example 2:

Input:
N = 6
A[] = {5,8,3,7,9,1}
Output: 
3
Explanation:
There are more than one LIS in this array.  One such Longest increasing subsequence is {5,7,9}.
Your Task:
Complete the function longestSubsequence() which takes the input array and its size as input parameters and returns the length of the longest increasing subsequence.

Expected Time Complexity : O( N*log(N) )
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 104
0 ≤ A[i] ≤ 106


link - https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1

-----------------------------------------------------------------------------------------------------------------------------------------

class Solution 
{
    //Function to find length of longest increasing subsequence.
    static int longestSubsequence(int size, int a[])
    {
        int[] dp = new int[size];
        
        dp[0] = a[0];
        
        int len = 1;
        
        for(int i=1; i<size; i++){
            if(a[i] > dp[len-1]){
                dp[len] = a[i];
                len++;
            }
            else{
                int idx = search(dp, 0, len-1, a[i]);
                dp[idx] = a[i];
            }
        }
        
        return len;
    }
    
    private static int search(int[] arr, int si, int ei, int ele){
        int res = 0;
        
        while(si<=ei){
            int mid = (si + ei)/2;
            
            if(arr[mid] >= ele){
                res = mid;
                ei = mid-1;
            }
            else{
                si = mid+1;
            }
        }
        
        return res;
    }
} 
