======================================== First Approach =============================================

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int n1 = s1.length();
        int n2 = s2.length();
        int n3 = s3.length();

        if(n1+n2 != n3){
            return false;
        }

        Boolean[][] dp = new Boolean[n1+1][n2+1];

        return traverse(s1, s2, s3, 0, 0, 0, dp);
    }

    private boolean traverse(String s1, String s2, String s3, int i, int j, int k, Boolean[][] dp){
        if(i==s1.length() && j==s2.length()){
            return k==s3.length();
        }

        if(dp[i][j] != null){
            return dp[i][j];
        }

        boolean res = false;

        if(i<s1.length() && s1.charAt(i)==s3.charAt(k)){
            res = traverse(s1, s2, s3, i+1, j, k+1, dp);
        }

        if(!res && j<s2.length() && s2.charAt(j)==s3.charAt(k)){
            res = traverse(s1, s2, s3, i, j+1, k+1, dp);
        }

        return dp[i][j] = res;
    }
}

------------------------------------------------------------------------------------------------------------------
==================================== Second Approach ============================

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        
        if(s1==null || s2==null || s3==null){
            return false;
        }

        if(s1.length()+s2.length() != s3.length()){
            return false;
        }

        if(s1.length()==0){
            return s2.equals(s3);
        }

        boolean[][][] dp = new boolean[s1.length()+1][s2.length()+1][s3.length()+1];
        dp[0][0][0] = true;
        
        for(int k=1; k<=s3.length(); k++){
            for(int i=0; i<=(k+1) && i<=s1.length(); i++){
                int j = k-i;

                if(j<0 || j>s2.length()){
                    continue;
                }

                if(i-1>=0 && i-1<=s1.length() && j>=0 && j<=s2.length() && s1.charAt(i-1)==s3.charAt(k-1)){
                    dp[i][j][k] = dp[i][j][k] || dp[i-1][j][k-1];
                }

                if(i>=0 && i<=s1.length() && j-1>=0 && j-1<=s2.length() && s2.charAt(j-1)==s3.charAt(k-1)){
                    dp[i][j][k] = dp[i][j][k] || dp[i][j-1][k-1];
                }

                if(k==s3.length()){
                    if(dp[i][j][k]){
                        return true;
                    }
                }
            }
        }

        return false;

    }
}
