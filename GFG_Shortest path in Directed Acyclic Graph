Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M, where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i.

Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, then return -1 for that vertex.

Example1:

Input:
N = 4, M = 2
edge = [[0,1,2],[0,2,1]
Output:
0 2 1 -1
Explanation:
Shortest path from 0 to 1 is 0->1 with edge weight 2. 
Shortest path from 0 to 2 is 0->2 with edge weight 1.
There is no way we can reach 3, so it's -1 for 3.
Example2:

Input:
N = 6, M = 7
edge = [[0,1,2],[0,4,1],[4,5,4],[4,2,2],[1,2,3],[2,3,6],[5,3,1]]
Output:
0 2 3 6 1 5
Explanation:
Shortest path from 0 to 1 is 0->1 with edge weight 2. 
Shortest path from 0 to 2 is 0->4->2 with edge weight 1+2=3.
Shortest path from 0 to 3 is 0->4->5->3 with edge weight 1+4+1=6.
Shortest path from 0 to 4 is 0->4 with edge weight 1.
Shortest path from 0 to 5 is 0->4->5 with edge weight 1+4=5.
Your Task:

You don't need to print or input anything. Complete the function shortest path() which takes an integer N as number of vertices, an integer M as number of edges and a 2D Integer array(or vector) edges as the input parameters and returns an integer array(or vector), denoting the list of distance from src to all nodes.

Expected Time Complexity: O(N+M), where N is the number of nodes and M is edges
Expected Space Complexity: O(N)

Constraint:
1 <= N,M <= 100
0 <= edgei,0,edgei,1 < n
0 <= edgei,2 <=105


link - https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

------------------------------------------------------------------------------------------------------------------------------------------

class Solution {

	public int[] shortestPath(int N,int M, int[][] edges) {
	    HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();
	    
	    for(int i=0; i<N; i++){
	        map.put(i, new HashMap<>());
	    }
	    
	    for(int[] arr : edges){
	        map.get(arr[0]).put(arr[1], arr[2]);
	    }
	    
	    
		int[] res = new int[N];
		
		Arrays.fill(res, -1);
		
		findPath(map, res);
		
		return res;
	}
	
	private static void findPath(HashMap<Integer, HashMap<Integer, Integer>> map, int[] res){
	    PriorityQueue<Pair> q = new PriorityQueue<>(new Comparator<Pair>(){
	        @Override
	        public int compare(Pair p1, Pair p2){
	            return p1.dis - p2.dis;
	        }
	    });
	    
	    Set<Integer> visited = new HashSet<>();
	    
	    q.add(new Pair(0, 0));
	    
	    while(!q.isEmpty()){
	        Pair curr = q.poll();
	        
	        if(visited.contains(curr.u)){
	            continue;
	        }
	        
	        visited.add(curr.u);
	        
	        res[curr.u] = curr.dis;
	        
	        for(int ngbr : map.get(curr.u).keySet()){
	            int cost = curr.dis + map.get(curr.u).get(ngbr);
	            q.add(new Pair(ngbr, cost));
	        }
	    }
	}
	
	static class Pair{
	    int u;
	    int dis;
	    
	    public Pair(int u, int dis){
	        this.u = u;
	        this.dis = dis;
	    }
	}
}
