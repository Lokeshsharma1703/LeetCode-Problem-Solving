class Solution {
    public int shortestPathLength(int[][] graph) {
        int n = graph.length;
        int goal = (1 << n) - 1;

        int res = 0;
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        boolean[][] visited = new boolean[n][1<<n];

        for(int i=0; i<n; i++){
            q.offer(new Pair<>(i, 1<<i));
        }

        while(!q.isEmpty()){
            for(int size = q.size(); size > 0; size--){
                int u = q.peek().getKey();
                int state = q.peek().getValue();
                q.poll();

                if(state == goal){
                    return res;
                }
                if(visited[u][state]){
                    continue;
                }

                visited[u][state] = true;

                for(int v : graph[u]){
                    q.offer(new Pair<>(v, state | (1 << v)));
                }
            }
            res++;
        }

        return -1;
    }
}
