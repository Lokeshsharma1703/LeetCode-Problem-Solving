Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 

Example 1:

Input:
S = "aba", K = 2
Output:
3
Explanation:
The substrings are: "ab", "ba" and "aba".
Example 2:

Input: 
S = "abaaca", K = 1
Output:
7
Explanation:
The substrings are: "a", "b", "a", "aa", "a", "c", "a". 
Your Task:
You don't need to read input or print anything. Your task is to complete the function substrCount() which takes the string S and an integer K as inputs and returns the number of substrings having exactly K distinct characters.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ |S| ≤ 106
1 ≤ K ≤ 26


link - https://practice.geeksforgeeks.org/problems/count-number-of-substrings4528/1

----------------------------------------------------------------------------------------------------------------------------------------

class Solution
{
     static long calcCount(String s , int k ){
        int i = 0;
        int j = 0 ;
        int n = s.length() ; 
        int[] charFreq = new int[26] ; 
        int dist_count = 0 ;
        long ans = 0 ;
        while(j<n){
            charFreq[s.charAt(j)-'a']++;
            if(charFreq[s.charAt(j)-'a']==1){
                dist_count++;
            }
            
            while(dist_count>k){
                charFreq[s.charAt(i)-'a']--;
                if(charFreq[s.charAt(i)-'a']==0){
                    dist_count--;
                }
                i++;
            }
            j++;
            ans+=(j-i+1); 
        }
        return ans ;
    }
    long substrCount (String S, int K) {
        return calcCount(S,K) - calcCount(S,K-1) ; 
    } 
}
