Given an integer X and an undirected acyclic graph with V nodes, labeled from 0 to V-1, and E edges, find the level of node labeled as X.

Level is the minimum number of edges you must travel from the node 0 to some target.

If there doesn't exists such a node that is labeled as X, return -1.

Example 1:

Input:

X = 4
Output:
2
Explanation:

We can clearly see that Node 4 lies at Level 2.
Example 2:

Input:

X = 1
Output:
1
Explanation:
Node 1 lies at level 1, immediate after Node 0.
Your task:
You dont need to read input or print anything. Your task is to complete the function nodeLevel() which takes two integers V and X denoting the number of vertices and the node, and another adjacency list adj as input parameters and returns the level of Node X. If node X isn't present it returns -1.

Expected Time Complexity: O(V)
Expected Auxiliary Space: O(V)

Constraints:
2 ≤ V ≤ 104
1 ≤ E ≤ 104
0 ≤ adji, j < V
1 ≤ X < V
Graph doesn't contain multiple edges and self loops.


link - https://practice.geeksforgeeks.org/problems/level-of-nodes-1587115620/1

-------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    int nodeLevel(int V, ArrayList<ArrayList<Integer>> adj, int X)
    {
        Queue<Integer> q = new LinkedList<>();
        Queue<Integer> child = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        int step = 0;
        
        q.offer(0);
        while(!q.isEmpty()){
            int rem = q.poll();
            
            if(visited.contains(rem)){
                continue;
            }
            
            if(rem == X){
                return step;
            }
            
            visited.add(rem);
            
            for(int ngbr : adj.get(rem)){
                if(!visited.contains(ngbr)){
                    child.offer(ngbr);
                }
            }
            
            if(q.isEmpty()){
                step++;
                q = child;
                child = new LinkedList<>();
            }
        }
        
        return -1;
    }
}
