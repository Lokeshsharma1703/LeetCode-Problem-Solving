class Solution {
    public int maximumRequests(int n, int[][] requests) {
        int[] indegree = new int[n];

        return maxRequests(0, requests, indegree, n, 0);
    }

    private static int maxRequests(int start, int[][] requests, int[] indegree, int n, int count){
        if(start == requests.length){
            for(int i=0;i<n;i++){
                if(indegree[i] != 0){
                    return 0;
                }
            }

            return count;
        }

        indegree[requests[start][0]]--;
        indegree[requests[start][1]]++;
        int take = maxRequests(start+1, requests, indegree, n, count+1);

        indegree[requests[start][0]]++;
        indegree[requests[start][1]]--;
        int notTake = maxRequests(start+1, requests, indegree, n, count);

        return Math.max(take, notTake);
    }
}
