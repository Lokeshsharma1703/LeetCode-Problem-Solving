class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        if(n==1){
            return 0;
        }

        Map<Integer, List<Integer>> index = new HashMap<>();
        for(int i=0;i<n;i++){
            if(!index.containsKey(arr[i])){
                index.put(arr[i], new ArrayList<>());
            }
            index.get(arr[i]).add(i);
        }

        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[n];
        q.offer(0);
        visited[0] = true;
        int steps = 0;

        while(!q.isEmpty()){
            int size = q.size();
            while(size-- > 0){
                int curr = q.poll();
                if(curr == n-1){
                    return steps;
                }

                List<Integer> jumps = index.get(arr[curr]);
                jumps.add(curr-1);
                jumps.add(curr+1);

                for(int jumpnext : jumps){
                    if(jumpnext>=0 && jumpnext<n && !visited[jumpnext]){
                        q.offer(jumpnext);
                        visited[jumpnext] = true;
                    }
                }
                jumps.clear();
            }
            steps++;
        }
        return -1;
    }
}
