================================== first approach =========================================

class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        int max = s.length()+1;
        int[] dp = new int[s.length() + 1];
        Arrays.fill(dp, max);
        dp[0] = 0;

        Set<String> st = new HashSet<>(Arrays.asList(dictionary));

        for(int i=1; i<=s.length(); i++){
            dp[i] = dp[i-1] + 1;
            for(int l=1; l<=i; l++){
                if(st.contains(s.substring(i-l, i))){
                    dp[i] = Math.min(dp[i], dp[i-l]);
                }
            }
        }

        return dp[s.length()];
    }
}


======================================== second approach ==========================================

class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        int n = s.length();
        Set<String> st = new HashSet<>();
        for(String word : dictionary){
            st.add(word);
        }

        int[] dp = new int[n];
        Arrays.fill(dp, -1);

        return find(0, s, st, dp);
    }

    private int find(int idx, String s, Set<String> st, int[] dp){
        if(idx >= s.length()){
            return 0;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }

        int res = s.length();
        String temp = "";

        for(int i=idx; i<s.length(); i++){
            temp += s.charAt(i);
            int curr = 0;
            if(!st.contains(temp)){
                curr = i - idx + 1;
            }

            res = Math.min(res, curr + find(i+1, s, st, dp));
        }

        return dp[idx] = res;
    }
}
