class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1){
            return -1;
        }

        List<Integer>[] graph = new List[n];
        for(int i=0;i<n;i++){
            graph[i] = new ArrayList<>();
        }

        for(int[] edge : connections){
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }

        int count = 0;
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            count += dfs(i, graph, visited);
        }

        return count-1;
    }

    private static int dfs(int v, List<Integer>[] graph, boolean[] visited){
        if(visited[v]){
            return 0;
        }
        visited[v] = true;
        for(int u : graph[v]){
            dfs(u, graph, visited);
        }
        return 1;
    }
}
