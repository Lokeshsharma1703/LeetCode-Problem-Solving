Given the root of a n-ary tree find the number of duplicate subtrees in the n-ary tree. Two trees are duplicates if they have the same structure with the same node values.

Example 1:

Input:
1 N 2 2 3 N 4 N 4 4 3 N N N N N

Output: 
2
Explanation: 
[4], [3] are duplicate subtree.
Example 2:

Input:
1 N 2 3 N 4 5 6 N N N N

Output: 
0
Explanation: 
No duplicate subtree found.
Your Task:
You don't need to read input or print anything. Your task is to complete the function duplicateSubtreeNaryTree() which takes the root of the n-ary tree as input and returns an integer value as a number of duplicate subtrees.

Expected Time Complexity: O(n), n is the total no of nodes
Expected Space Complexity: O(n2)

Constraints:
   1 <= n < 103
   1 <= node.key< 103
   
   
   link - https://practice.geeksforgeeks.org/problems/079dee7e7db7a784ed73f604e3cf1712432edf79/1
   
   --------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   class Solution{
    public int duplicateSubtreeNaryTree(Node root){
        Map<String, Integer> subtreeMap = new HashMap<>();
        
        constructSubtreeString(root, subtreeMap);

        int count = 0;
        for (int freq : subtreeMap.values()) {
            if (freq > 1) {
                count++;
            }
        }

        return count;
    }
    
    private String constructSubtreeString(Node node, Map<String, Integer> subtreeMap) {
        StringBuilder sb = new StringBuilder();
        sb.append(node.data).append(":");

        List<String> childSubtrees = new ArrayList<>();
        for (Node child : node.children) {
            childSubtrees.add(constructSubtreeString(child, subtreeMap));
        }

        Collections.sort(childSubtrees);

        for (String childSubtree : childSubtrees) {
            sb.append(childSubtree).append(",");
        }

        String subtreeString = sb.toString();
        subtreeMap.put(subtreeString, subtreeMap.getOrDefault(subtreeString, 0) + 1);

        return subtreeString;
    }
    
}
