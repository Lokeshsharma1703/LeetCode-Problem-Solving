/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        int n = countNodes(head);
        ListNode[] res = new ListNode[k];
        
        int extra = n%k;
        int each = n/k;

        int idx = 0;
        ListNode temp = head;
        int count = 0;
        int req = 0;
        ListNode temp1 = null;

        while(idx != k){
            if(req == 0){
                res[idx] = temp;
                idx++;
                req = each;

                if(extra > 0){
                    req += 1;
                    extra--;
                }

                if(req > 0){
                    req--;
                }

                if(req == 0){
                    temp1 = temp;
                }

                if(temp != null){
                    temp = temp.next;
                }

                if(temp1 != null){
                    temp1.next = null;
                }
            }
            else{
                if(req == 1){
                    temp1 = temp;
                }

                if(temp != null){
                    temp = temp.next;
                }

                if(temp1 != null){
                    temp1.next = null;
                }

                if(req > 0){
                    req--;
                }
            }
        }

        return res;
    }

    private int countNodes(ListNode head){
        int count = 0;

        while(head != null){
            count++;
            head = head.next;
        }

        return count;
    }
}
