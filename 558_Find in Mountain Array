/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int n = mountainArr.length();
        //find the peakIndex
        int peakIdx = getPeakIndex(mountainArr, n);
        //check if target exists in asc sort part(i.e 0 to peakIdx) and return the idx if found..
        int ascIdx = binarySearchAsc(mountainArr, 0, peakIdx, target);
        if(ascIdx != -1) return ascIdx;
        //check if target exists in desc sort part(i.e peakIdx + 1, n-1) and return the idx if found...
        int descIdx = binarySearchDesc(mountainArr, peakIdx + 1, n-1, target);
        if(descIdx != -1) return descIdx;

        return -1;
    }

    private int getPeakIndex(MountainArray marr, int n) {
        int low = 0, high = n - 1;
        while(low < high) {
            int mid = (low + high) / 2;
            if(marr.get(mid) < marr.get(mid + 1)) {
                low = mid + 1;
            }else {
                high = mid;
            }
        }
        return low;
    }

    private int binarySearchAsc(MountainArray marr, int start, int end, int target) {
        int low = start, high = end;
        while(low < high) {
            int mid = (low + high) / 2;
            int ele = marr.get(mid);
            if(ele == target) return mid;
            else if(target < ele) high = mid - 1;
            else low = mid + 1;
        }
        return marr.get(low) == target ? low : -1;
    }

    private int binarySearchDesc(MountainArray marr, int start, int end, int target) {
        int low = start, high = end;
        while(low < high) {
            int mid = (low + high) / 2;
            int ele = marr.get(mid);
            if(ele == target) return mid;
            else if(target < ele) low = mid + 1;
            else high = mid - 1;
        }
        return marr.get(low) == target ? low : -1;
    }
}
