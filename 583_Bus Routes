class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if(source == target){
            return 0;
        }

        Map<Integer, List<Integer>> graph = new HashMap<>();
        Queue<Integer> pq = new ArrayDeque<>();

        for(int i=0; i<routes.length; i++){
            for(int j=0; j<routes[i].length; j++){
                if(!graph.containsKey(routes[i][j])){
                    graph.put(routes[i][j], new ArrayList<>());
                }

                graph.get(routes[i][j]).add(i);
            }
        }

        pq.offer(source);

        boolean[] visited = new boolean[routes.length];
        int level = 0;

        while(!pq.isEmpty()){
            int s = pq.size();

            for(int i=0; i<s; i++){
                int node = pq.poll();
                
                for(int ngbr : graph.get(node)){
                    if(visited[ngbr]){
                        continue;
                    }

                    for(int r : routes[ngbr]){
                        if(r == node){
                            continue;
                        }

                        if(r == target){
                            return level+1;
                        }

                        pq.offer(r);
                    }

                    visited[ngbr] = true;
                }
            }

            level++;
        }

        return -1;
    }
}
