-------------------first approach-----------------------
class Solution {
    public boolean search(int[] nums, int target) {
        int lo = 0;
        int hi = nums.length-1;

        while(lo <= hi){
            int mid = lo + (hi - lo)/2;

            if(nums[mid]==target){
                return true;
            }

            if((nums[lo]==nums[mid]) && (nums[mid]==nums[hi])){
                lo++;
                hi--;
            }
            else if(nums[lo] <= nums[mid]){   // first half is in order
                if((nums[lo] <= target) && (nums[mid] >= target)){ // target is in first half
                    hi = mid-1;
                }
                else{
                    lo = mid+1;
                }
            }
            else{  // second half is in order
                if((nums[mid] <= target) && (nums[hi] >= target)){ // target is in second half
                    lo = mid+1;
                }
                else{
                    hi = mid-1;
                }
            }
        }

        return false;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------

-----------------------------second approach----------------------------------
class Solution {
    public boolean search(int[] nums, int target) {
        int k = 1;
        while(k<nums.length && nums[k]>=nums[k-1]){
            k++;
        }
        reverse(nums,0,k-1);
        reverse(nums,k, nums.length-1);
        reverse(nums, 0 , nums.length-1);
        
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]==target){
                return true;
            }
            else if(nums[mid]<target){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return false;
    }
    private static void reverse(int[] arr, int i, int j){
        while(i<j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
}
