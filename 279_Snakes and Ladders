class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        Queue<Integer> q = new LinkedList<>();
        q.offer(1);
        for(int i=0; !q.isEmpty(); i++){
            for(int size = q.size() ; size>0; size--){
                int num = q.poll();
                if(visited[num]){
                    continue;
                }
                visited[num] = true;
                if(num==n*n){
                    return i;
                }
                for(int j=1 ; j<=6 && num + j <= n * n; j++){
                    int nxt = num+j;
                    int val = getBoardValue(board, nxt);
                    if(val > 0){
                        nxt = val;
                    }
                    if(!visited[nxt]){
                        q.offer(nxt);
                    }
                }
            }
        }
        return -1;
    }
    private int getBoardValue(int[][] board, int num){
        int n = board.length;
        int r = (num-1)/n;
        int x = n - 1 - r;
        int y = r % 2 == 0 ? num - 1 - r * n : n + r * n - num;
        return board[x][y];
    }
}
