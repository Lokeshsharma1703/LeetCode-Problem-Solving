Given a string S of lowercase english characters. Rearrange characters of the given string such that the vowels and consonants occupy alternate positions and the string so formed should be lexicographically (alphabetically) smallest. 
Note: Vowels are 'a', 'e', 'i', 'o' and 'u'. 

Example 1:

Input:
S = "aeroplane"
Output: alanepero
Explanation: alanepero  
The vowels and cosonants are arranged 
alternatively with vowels shown in bold.
Also, there's no lexicographically smaller
string possible with required conditions.
Example 2:

Input: 
S = "mississippi"
Output: -1
Explanation: The number of vowels is 4 
whereas the number of consonants is 7.
Hence, there's no way to arrange the
vowels and consonants alternatively.

Your Task:
You don't need to read input or print anything. Your task is to complete the function rearrange() which takes the string S and its size N as inputs and returns the modified string as stated in the description. If such a modification is not possible, return the string "-1".


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(2*26).


Constraints:
1 <= N <= 10^6
'a' <= S[ i ] <= 'z'



link - https://practice.geeksforgeeks.org/problems/alternate-vowel-and-consonant-string2939/1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------



class Solution{
    public String rearrange(String s, int N){
        int[] freqv = new int[26];
        int[] freqc = new int[26];
        int cv = 0;
        int cc = 0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='a' || s.charAt(i)=='e' || s.charAt(i)=='i' || s.charAt(i)=='o' || s.charAt(i)=='u'){
                freqv[s.charAt(i)-'a']++;
                cv++;
            }
            else{
                freqc[s.charAt(i)-'a']++;
                cc++;
            }
        }
        if(Math.abs(cv-cc)>1){
            return "-1";
        }
        if(cv==cc){
            int i = 0;
            int j = 0;
            while(i<freqv.length && freqv[i]==0){
                i++;
            }
            while(j<freqc.length && freqc[j]==0){
                j++;
            }
            if(i<j){
                return createString(freqv, freqc);
            }
            else{
                return createString(freqc, freqv);
            }
        }
        else if(cv>cc){
            return createString(freqv, freqc);
        }
        else{
            return createString(freqc, freqv);
        }
    }
    private static String createString(int[] a, int[] b){
        StringBuilder res = new StringBuilder();
        int i = 0;
        int j = 0;
        while(i<a.length || j<b.length){
            while(i<a.length && a[i]==0){
                i++;
            }
            if(i<a.length && a[i]!=0){
                res.append((char)(i+'a'));
                a[i]--;
            }
            while(j<b.length && b[j]==0){
                j++;
            }
            if(j<b.length && b[j]!=0){
                res.append((char)(j+'a'));
                b[j]--;
            }
        }
        return res.toString();
    }
}
