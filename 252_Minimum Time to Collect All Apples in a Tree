class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        return minSteps(0, adj, hasApple, 0);
    }

    private static int minSteps(int idx, List<List<Integer>> adj, List<Boolean> hasApple, int p) {
        int total = 0;
        for (int n : adj.get(idx)) {
            if (n == p) {
                continue;
            }
            total += minSteps(n, adj, hasApple, idx);
        }
        if (idx != 0 && (hasApple.get(idx) || total > 0)) {
            total += 2;
        }
        return total;
    }
}
