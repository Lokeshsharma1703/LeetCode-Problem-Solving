class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];
        permutation(nums, freq, 0, temp, ans);
        return ans;
    }
    private static void permutation(int[] nums, boolean[] freq, int qspf, List<Integer> res, List<List<Integer>> ans) {
        if (qspf == nums.length) {
            ans.add(new ArrayList<>(res));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (freq[i] == false) {
                freq[i] = true;
                res.add(nums[i]);
                permutation(nums, freq, qspf + 1, res, ans);
                res.remove(res.size()-1);
                freq[i] = false;
            }
        }
    }
}
