/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
        Map<Integer, Integer> mp = new HashMap<>();

        traverse(root, mp);

        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(mp.entrySet());
        list.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));

        int max = list.get(0).getValue();
        List<Integer> ll = new ArrayList<>();

        for(Map.Entry<Integer, Integer> entry : list){
            if(entry.getValue() == max){
                ll.add(entry.getKey());
            }
            else{
                break;
            }
        }

        int[] res = new int[ll.size()];
        for(int i=0; i<ll.size(); i++){
            res[i] = ll.get(i);
        }

        return res;
    }

    public void traverse(TreeNode root, Map<Integer, Integer> mp){
        if(root == null){
            return;
        }

        mp.put(root.val, mp.getOrDefault(root.val, 0)+1);
        traverse(root.left, mp);
        traverse(root.right, mp);
    }
}
