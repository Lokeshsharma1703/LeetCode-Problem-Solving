class Solution {
    public int minFallingPathSum(int[][] matrix) {
        if(matrix.length==1 || matrix[0].length==1){
            return matrix[0][0];
        }
        int[][] dp = new int[matrix.length][matrix[0].length];
        int res = Integer.MAX_VALUE;
        for(int i=0;i<matrix.length;i++){
            res = Math.min(res, minFalling(matrix, 0, i, dp));
        }
        return res;
    }
    public static int minFalling(int[][] matrix, int row, int col, int[][] dp){
        int m = matrix.length;
        int n = matrix[0].length;
        if(dp[row][col] != 0){
            return dp[row][col];
        }
        if(row==n-1){
            return dp[row][col] = matrix[row][col];
        }
        int left = Integer.MAX_VALUE;
        int right = Integer.MAX_VALUE;
        if(col>0){
            left = minFalling(matrix, row+1, col-1, dp);
        }
        int str = minFalling(matrix, row+1, col, dp);

        if(col<n-1){
            right = minFalling(matrix, row+1, col+1, dp);
        }

        dp[row][col] = Math.min(left, Math.min(str, right))+matrix[row][col];

        return dp[row][col];
    }
}
