Given a 2D binary matrix A(0-based index) of dimensions NxM. Find the minimum number of steps required to reach from (0,0) to (X, Y).
Note: You can only move left, right, up and down, and only through cells that contain 1.

Example 1:

Input:
N=3, M=4
A=[[1,0,0,0], 
   [1,1,0,1],
   [0,1,1,1]]
X=2, Y=3 
Output:
5
Explanation:
The shortest path is as follows:
(0,0)->(1,0)->(1,1)->(2,1)->(2,2)->(2,3).
Example 2:

Input:
N=3, M=4
A=[[1,1,1,1],
   [0,0,0,1],
   [0,0,0,1]]
X=0, Y=3
Output:
3
Explanation:
The shortest path is as follows:
(0,0)->(0,1)->(0,2)->(0,3).
Your Task:
You don't need to read input or print anything. Your task is to complete the function shortestDistance() which takes the integer N, M, X, Y, and the 2D binary matrix A as input parameters and returns the minimum number of steps required to go from (0,0) to (X, Y).If it is impossible to go from (0,0) to (X, Y),then function returns -1. If value of the cell (0,0) is 0 (i.e  A[0][0]=0) then return -1.

Expected Time Complexity:O(N*M)
Expected Auxillary Space:O(N*M)

Constraints:
1 <= N,M <= 250
0 <= X < N
0 <= Y < M
0 <= A[i][j] <= 1


link - https://practice.geeksforgeeks.org/problems/shortest-source-to-destination-path3544/1

---------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    int shortestDistance(int N, int M, int A[][], int X, int Y) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(0, 0, 0));
        
        int[] row = {0, -1, 1, 0};
        int[] col = {1, 0, 0, -1};
        
        while(!q.isEmpty()){
            Pair curr = q.poll();
            
            int dis = curr.dis;
            int src = curr.src;
            int des = curr.des;
            
            if(src==X && des==Y){
                return dis;
            }
            
            for(int k=0; k<4; k++){
                int nx = row[k] + src;
                int ny = col[k] + des;
                
                if(nx>=0 && ny>=0 && nx<N && ny<M && A[nx][ny]==1){
                    A[nx][ny] = 0;
                    
                    q.add(new Pair(nx, ny, dis+1));
                }
            }
        }
        
        return -1;
    }
    
    public class Pair{
        int src;
        int des;
        int dis;
        public Pair(int src, int des, int dis){
            this.src = src;
            this.des = des;
            this.dis = dis;
        }
    }
    
};
