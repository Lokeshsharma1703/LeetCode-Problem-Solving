class Solution {
    public long minimumFuelCost(int[][] roads, int seats) {
        List<Integer>[] graph = new List[roads.length+1];

        for(int i=0;i<graph.length;i++){
            graph[i] = new ArrayList<>();
        } 

        for(int[] arr : roads){
            graph[arr[0]].add(arr[1]);
            graph[arr[1]].add(arr[0]);
        }

        dfs(graph, 0, -1, seats);
        return res;
    }

    long res = 0;

    private int dfs(List<Integer>[] graph, int u, int parent, int seats){
        int people = 1;
        for(int v : graph[u]){
            if(v==parent){
                continue;
            }
            people += dfs(graph, v, u, seats);
        }

        if(u > 0){
            res += (people + seats - 1)/seats;
        }
        return people;
    }
}
