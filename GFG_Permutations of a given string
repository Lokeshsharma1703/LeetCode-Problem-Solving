Given a string S. The task is to print all unique permutations of the given string in lexicographically sorted order.

Example 1:

Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .
Example 2:

Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function find_permutaion() which takes the string S as input parameter and returns a vector of string in lexicographical order.

Expected Time Complexity: O(n! * n)
Expected Space Complexity: O(n! * n)

Constraints:
1 <= length of string <= 5


link - https://practice.geeksforgeeks.org/problems/permutations-of-a-given-string2041/1

-------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
    public List<String> find_permutation(String S) {
        List<String> res = new ArrayList<>();
        permutation(S, "", res);
        Collections.sort(res);
        return res;
    }
    
    private static void permutation(String ques, String res, List<String> list){
        if(ques.length()==0){
            list.add(res);
            return;
        }
        
        for(int i=0; i<ques.length(); i++){
            
            char ch = ques.charAt(i);
            boolean flag = false;
            for(int j=i+1; j<ques.length(); j++){
                if(ques.charAt(j)==ch){
                    flag = true;
                    break;
                }
            }
            
            if(!flag){
                String first = ques.substring(0, i);
                String last = ques.substring(i+1);
                
                permutation(first+last, res+ch, list);
            }
        }
    }
}
