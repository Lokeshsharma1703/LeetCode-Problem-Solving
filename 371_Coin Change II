class Solution {
    public int change(int amount, int[] coins) {

        // --------- Memoization---------------

        // int[][] dp = new int[amount+1][coins.length+1];
        // for(int[] arr : dp){
        //     Arrays.fill(arr, -1);
        // }

        // return count(coins, amount, 0, dp);


        // ---------- tabulation --------------------

        int[][] dp = new int[coins.length+1][amount+1];

        for(int i=0; i <= coins.length; i++){
            dp[i][0] = 1;
        }

        for(int coin=1; coin<dp.length; coin++){
            for(int amt=1; amt<dp[0].length; amt++){
                int take = 0;
                if(coins[coin-1] <= amt){
                    take = dp[coin][amt-coins[coin-1]];
                }
                int nottake = dp[coin-1][amt];

                dp[coin][amt] = take + nottake;
            }
        }

        return dp[coins.length][amount];
    }

    private static int count(int[] coins, int amount, int idx, int[][] dp){
        if(amount==0){
            return 1;
        }
        if(amount < 0 || idx==coins.length){
            return 0;
        }

        if(dp[amount][idx] != -1){
            return dp[amount][idx];
        }

        int take = 0;
        if(amount-coins[idx] >= 0){
            take = count(coins, amount-coins[idx], idx, dp);
        }

        int nottake = count(coins, amount, idx+1, dp);

        return dp[amount][idx] = take + nottake;
    }
}

-----------------------------------------------------------------------------------------------------------------------


class Solution {
    public int change(int amount, int[] coins) {
        int[][] dp = new int[coins.length+1][amount+1];

        for (int i = 0; i <= coins.length; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[0].length; j++) {
                int inc = 0;
                int exc = 0;

                if(coins[i-1] <= j){
                    inc = dp[i][j-coins[i-1]];
                }
                exc = dp[i-1][j];

                dp[i][j] = inc + exc;
            }
        }

        return dp[dp.length-1][dp[0].length-1];
    }
}
