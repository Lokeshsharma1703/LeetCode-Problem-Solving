class Solution {
    public void solveSudoku(char[][] board) {
        char[][] temp = new char[board.length][board[0].length];
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                temp[i][j] = board[i][j];
            }
        }
        sudokuSolver(temp, 0, 0, board);
    }
    private static void sudokuSolver(char[][] board, int row, int col, char[][] res){
        if(col==9){
            row++;
            col=0;
        }
        if(row==9){
            display(board, res);
            return;
        }
        if(board[row][col]!='.'){
            sudokuSolver(board, row, col+1, res);
        }
        else{
            for(int val = 1;val<=9;val++){
                if(isPossible(board, row, col, val)){
                    board[row][col] = (char)(val+'0');
                    sudokuSolver(board, row, col+1, res);
                    board[row][col] = '.';
                }
            }
        }
    }
    private static boolean isPossible(char[][] board, int row, int col, int val){
        // Horizontal
        for(int c=0;c<9;c++){
            if(board[row][c]==(char)(val+'0')){
                return false;
            }
        }

        // Vertical
        for(int r=0;r<9;r++){
            if(board[r][col]==(char)(val+'0')){
                return false;
            }
        }

        // 3*3 matrix
        int r = row-row%3;
        int c = col-col%3;
        for(int i=r;i<r+3;i++){
            for(int j=c;j<c+3;j++){
                if(board[i][j]==(char)(val+'0')){
                    return false;
                }
            }
        }
        return true;
    }
    private static void display(char[][] board, char[][] res){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                res[i][j] = board[i][j];
            }
        }
    }
}
