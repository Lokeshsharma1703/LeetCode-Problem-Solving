import java.util.Arrays;

/*
 * @lc app=leetcode id=1235 lang=java
 *
 * [1235] Maximum Profit in Job Scheduling
 */

// @lc code=start
class Solution {
    class Jobs {
        int start;
        int end;
        int profit;

        Jobs(int start, int end, int profit) {
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
    }

    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int len = profit.length;
        Jobs[] jobs = new Jobs[len];
        for (int i = 0; i < jobs.length; i++) {
            jobs[i] = new Jobs(startTime[i], endTime[i], profit[i]);
        }
        Arrays.sort(jobs, (a, b) -> (a.end - b.end));
        int[] dp = new int[len];
        dp[0] = jobs[0].profit;
        for (int i = 1; i < len; i++) {
            dp[i] = Math.max(dp[i - 1], jobs[i].profit);
            for (int j = i - 1; j >= 0; j--) {
                if (jobs[j].end <= jobs[i].start) {
                    dp[i] = Math.max(dp[i], jobs[i].profit + dp[j]);
                    break;
                }
            }
        }
        return dp[len - 1];
    }
}
// @lc code=end
