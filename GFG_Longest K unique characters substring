Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.

Example 1:

Input:
S = "aabacbebebe", K = 3
Output: 
7
Explanation: 
"cbebebe" is the longest substring with 3 distinct characters.
Example 2:

Input: 
S = "aaaa", K = 2
Output: -1
Explanation: 
There's no substring with 2 distinct characters.
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestKSubstr() which takes the string S and an integer K as input and returns the length of the longest substring with exactly K distinct characters. If there is no substring with exactly K distinct characters then return -1.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).

Constraints:
1 ≤ |S| ≤ 105
1 ≤ K ≤ 26
All characters are lowercase latin characters.


link - https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int longestkSubstr(String s, int k) {
        HashMap<Character, Integer> mp = new HashMap<>();
        
        int ei = 0;
        int si = 0;
        
        int res = -1;
        
        while(ei < s.length()){
            mp.put(s.charAt(ei), mp.getOrDefault(s.charAt(ei), 0)+1);
            
            while(mp.size() > k){
                mp.put(s.charAt(si), mp.get(s.charAt(si))-1);
                if(mp.get(s.charAt(si))==0){
                    mp.remove(s.charAt(si));
                }
                
                si++;
            }
            
            if(mp.size()==k){
                res = Math.max(res, ei-si+1);
            }
            
            ei++;
        }
        
        
        return res;
    }
}
