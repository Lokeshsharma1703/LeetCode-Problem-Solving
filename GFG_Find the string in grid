Given a 2D grid of n*m of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is said to be found in a direction if all characters match in this direction (not in zig-zag form). The 8 directions are, horizontally left, horizontally right, vertically up, vertically down, and 4 diagonal directions.

Note: The returning list should be lexicographically smallest. If the word can be found in multiple directions starting from the same coordinates, the list should contain the coordinates only once. 

Example 1:

Input: 
grid = {{a,b,c},{d,r,f},{g,h,i}},
word = "abc"
Output: 
{{0,0}}
Explanation: 
From (0,0) we can find "abc" in horizontally right direction.
Example 2:

Input: 
grid = {{a,b,a,b},{a,b,e,b},{e,b,e,b}}
word = "abe"
Output: 
{{0,0},{0,2},{1,0}}
Explanation: 
From (0,0) we can find "abe" in right-down diagonal. 
From (0,2) we can find "abe" in left-down diagonal. 
From (1,0) we can find "abe" in horizontally right direction.
Your Task:
You don't need to read or print anything, Your task is to complete the function searchWord() which takes grid and word as input parameters and returns a list containing the positions from where the word originates in any direction. If there is no such position then returns an empty list.

Expected Time Complexity: O(n*m*k) where k is constant
Expected Space Complexity: O(1)

Constraints:
1 <= n <= m <= 50
1 <= |word| <= 15


link - https://practice.geeksforgeeks.org/problems/find-the-string-in-grid0111/1

-------------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    public int[][] searchWord(char[][] grid, String word)
    {
        List<Pair> res = new ArrayList<>();
        
        int n = grid.length;
        int m = grid[0].length;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(isPossible(grid, i, j, word)){
                    res.add(new Pair(i, j));
                }
            }
        }
        
        int[][] arr = new int[res.size()][2];
        for(int i=0; i<res.size(); i++){
            arr[i][0] = res.get(i).x;
            arr[i][1] = res.get(i).y;
        }
        
        return arr;
    }
    
    int[] r = {-1, -1, -1, 0, 0, 1, 1, 1};
    int[] c = {-1, 0, 1, -1, 1, -1, 0, 1};
    
    private boolean isPossible(char[][] grid, int row, int col, String word){
        int n = grid.length;
        int m = grid[0].length;
        
        if(grid[row][col] != word.charAt(0)){
            return false;
        }
        
        for(int i=0; i<8; i++){
            int k=1;
            int nx = row + r[i];
            int ny = col + c[i];
            
            for(k=1; k<word.length(); k++){
                if(nx < 0 || nx >= n || ny < 0 || ny >= m){
                    break;
                }
                
                if(grid[nx][ny] != word.charAt(k)){
                    break;
                }
                
                nx += r[i];
                ny += c[i];
            }
            
            if(k == word.length()){
                return true;
            }
        }
        
        return false;
    }
    
    class Pair{
        int x;
        int y;
        
        public Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
}
