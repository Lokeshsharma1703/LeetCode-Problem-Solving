Given a Binary Search Tree. Your task is to complete the function which will return the Kth largest element without doing any modification in Binary Search Tree.

Example 1:

Input:
      4
    /   \
   2     9
k = 2 
Output: 4
Example 2:

Input:
       9
        \ 
          10
K = 1
Output: 10
Your Task:
You don't need to read input or print anything. Your task is to complete the function kthLargest() which takes the root of the BST and an integer K as inputs and returns the Kth largest element in the given BST.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H) where H is max recursion stack of height H at a given time.

Constraints:
1 <= N <= 105
1 <= K <= N


link - https://practice.geeksforgeeks.org/problems/kth-largest-element-in-bst/1

---------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    public int kthLargest(Node root,int K)
    {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        reverseInOrder(root, pq, K);
        return pq.peek();
    }
    
    public void reverseInOrder(Node root, PriorityQueue<Integer> pq, int k){
        if(root == null){
            return;
        }
        
        reverseInOrder(root.right, pq, k);
        if(pq.size() < k){
            pq.add(root.data);
        }
        else{
            if(pq.peek() < root.data){
                pq.poll();
                pq.add(root.data);
            }
        }
        reverseInOrder(root.left, pq, k);
    }
}
