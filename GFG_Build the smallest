Given a number k and string num of digits (0 to 9) denoting a positive integer. Find a string denoting the lowest integer number possible by removing k digits from num, without changing their order.
Note: num will not contain any leading zero.

 

Example 1:

Input:
k = 2
num = "143729"
Output: "1329"
Explanation: 1329 is the minimum number
possible after removing '4' and '7'.
 

Example 2:

Input:
k = 3
num = "10056"
Output: "0"
Explanation: 0 is the minimum number
possible after removing '1' , '5' and '6'.
 

Your Task:  
You dont need to read input or print anything. Complete the function buildLowestNumber() which accepts string num and integer k as input parameters and returns a string denoting the smallest integer possible after removing k digits from num without changing the order.


Expected Time Complexity: O(Length of num) 
Expected Auxiliary Space: O(Length of num) 


Constraints:
1 <= Length of num <= 105
0 <= k < Length of num



link - https://practice.geeksforgeeks.org/problems/build-the-smallest2841/1

----------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    static String buildLowestNumber(String str, int N) {
        Stack<Character> st = new Stack<>();
        for(int i=0;i<str.length();i++){
            while(!st.isEmpty() && st.peek()>str.charAt(i) && N>0){
                st.pop();
                N--;
            }
            st.push(str.charAt(i));
        }
        while(!st.isEmpty() && N>0){
            st.pop();
            N--;
        }
        StringBuilder res = new StringBuilder();
        while(!st.isEmpty()){
            res.append(st.pop());
        }
        for(int i=res.length()-1;i>=0;i--){
            if(res.charAt(i)!='0'){
                break;
            }
            if(res.charAt(i)=='0'){
                res.deleteCharAt(i);
            }
        }
        res.reverse();
        return res.length()==0?"0":res.toString();
    }
}
