class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> res = new ArrayList<>();

        PriorityQueue<Pair<Integer, Pair<Integer, Integer>>> pq = new PriorityQueue<>((a, b) -> b.getKey() - a.getKey());

        for(int i=0; i<nums1.length; i++){
            for(int j=0; j<nums2.length; j++){
                int sum = nums1[i] + nums2[j];

                if(pq.size() < k){
                    pq.offer(new Pair<>(sum, new Pair<>(nums1[i], nums2[j])));
                }
                else if(sum < pq.peek().getKey()){
                    pq.poll();
                    pq.offer(new Pair<>(sum, new Pair<>(nums1[i], nums2[j])));
                }
                else{
                    break;
                }
            }
        }

        while(!pq.isEmpty()){
            Pair<Integer, Integer> p = pq.poll().getValue();
            List<Integer> list = new ArrayList<>();

            list.add(p.getKey());
            list.add(p.getValue());

            res.add(new ArrayList<>(list));
        }

        return res;

    }

}
