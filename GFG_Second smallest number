The task is to find the second smallest number with a given sum of digits as S and the number of digits as D.
Example 1:

Input:
S = 9 
D = 2
Output:
27
Explanation:
18 is the smallest number possible with sum = 9
and total digits = 2, Whereas the second
smallest is 27.
Example 2:

Input:
S = 16
D = 3
Output:
178
Explanation:
169 is the smallest number possible with sum is
16 and total digits = 3, Whereas the second
smallest is 178.

Your Task:
You don't need to read input or print anything. Your task is to complete the function secondSmallest() which takes the two integers S and D respectively and returns a string which is the second smallest number if possible, else return "-1".

Expected Time Complexity: O(D)
Expected Space Complexity: O(1)

Constraints:
1 ≤ S ≤ 105
1 ≤ D ≤ 105


link - https://practice.geeksforgeeks.org/problems/5c2734730cb1e98e3877a0b91f7d680d0efc8acf/1

--------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution{
    static String secondSmallest(int S, int D){
        int count = 0;
        StringBuilder sb = new StringBuilder();
        
        if(S >= D*9){
            return "-1";
        }
        
        boolean add = true;
        
        while(S>0){
            if(S<=10){
                if(count==(D-1)){
                    sb.append(Integer.toString(S));
                    add = false;
                }
                else{
                    sb.append(Integer.toString(S-1));
                }
                S=0;
            }
            else{
                sb.append(Integer.toString(9));
                S -= 9;
            }
            count++;
        }
        
        if(add){
            count++;
            for(int i=count; i<D;i++){
                sb.append("0");
            }
            sb.append("1");
        }
        
        for(int i=1;i<D;i++){
            if(sb.charAt(i) != '9'){
                sb.setCharAt(i-1, (char)(sb.charAt(i-1)-1));
                sb.setCharAt(i, (char)(sb.charAt(i)+1));
                break;
            }
        }
        
        return sb.reverse().toString();
    }
}
