Given a non-empty array nums[] of integers of length N, find the top k elements which have the highest frequency in the array. If two numbers have same frequencies, then the larger number should be given more preference.

Example 1:

Input:
N = 6
nums = {1,1,1,2,2,3}
k = 2
Output: {1, 2}
Example 2:

Input:
N = 8
nums = {1,1,2,2,3,3,3,4}
k = 2
Output: {3, 2}
Explanation: Elements 1 and 2 have the
same frequency ie. 2. Therefore, in this
case, the answer includes the element 2
as 2 > 1.
User Task:
You don't have to read or print anything. You will have to complete the function topK() that takes an array nums[] and integer k as input and returns a list of top k most frequent elements. If any two elements have same frequencies, then give more preference to the larger elemet.

Expected Time Complexity : O(NlogN)
Expected Auxilliary Space : O(N)

Constraints:
1 <= N <= 105
1<= nums[i] <=105
1 <= k <= N


link - https://www.geeksforgeeks.org/problems/top-k-frequent-elements-in-array/1

------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public  int[] topK(int[] nums, final int k) {
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0;i<nums.length;i++){
            map.putIfAbsent(nums[i],0);
            map.put(nums[i], map.get(nums[i])+1);
        }
        
        final Map<Integer, TreeSet<Integer>> lm = new TreeMap<>((x,y)->y-x);
        
        map.entrySet().stream().forEach(e->{
            lm.putIfAbsent(e.getValue(), new TreeSet<Integer>((x,y)->y-x));
            lm.get(e.getValue()).add(e.getKey());
        
        });
        
        final List<Integer> output = new ArrayList<>();
        
        lm.entrySet().stream().forEach(e->{
            e.getValue().stream().filter(v -> output.size()<k).forEach(v->output.add(v));
        });
        
        
        int[] oc = new int[k];
        
        for(int i=0;i<output.size();i++){
            oc[i] = output.get(i);
        }
        
        return oc;
    }
}
