class Solution {
    public boolean validPartition(int[] nums) {

        // --------------- Memoization-------------
        // int[] dp = new int[nums.length];
        // Arrays.fill(dp, -1);
        // isValid(nums, nums.length, 0, dp);
        // return dp[0]==1;


        // --------------- Tabulation ----------------
        // int n = nums.length;
        // int[] dp = new int[n+1];
        // dp[n] = 1;

        // for(int i=n-1; i>=0 ;i--){
        //     if(i+1<n && nums[i]==nums[i+1]){
        //         if(dp[i+2]==1){
        //             dp[i] = 1;
        //         }
        //     }
        //     if(i+2<n && nums[i]==nums[i+1] && nums[i+1]==nums[i+2]){
        //         if(dp[i+3]==1){
        //             dp[i] = 1;
        //         }
        //     }
        //     if(i+2<n && nums[i+1]-nums[i]==1 && nums[i+2]-nums[i+1]==1){
        //         if(dp[i+3]==1){
        //             dp[i] = 1;
        //         }
        //     }
        // }

        // return dp[0]==1;


        // -------------- Memory Optimization -------------------
        int n = nums.length;
        int one = 1;
        int two = 0;
        int three = 0;
        for(int i=n-1; i>=0 ;i--){
            int curr = 0;
            if(i+1<n && nums[i]==nums[i+1]){
                if(two==1){
                    curr = 1;
                }
            }
            if(i+2<n && nums[i]==nums[i+1] && nums[i+1]==nums[i+2]){
                if(three==1){
                    curr = 1;
                }
            }
            if(i+2<n && nums[i+1]-nums[i]==1 && nums[i+2]-nums[i+1]==1){
                if(three==1){
                    curr = 1;
                }
            }

            three = two;
            two = one;
            one = curr;
        }

        return one==1;
    }

    private static int isValid(int[] nums, int n, int i, int[] dp){
        if(i>=n){
            return 1;
        }
        if(dp[i] != -1){
            return dp[i];
        }

        if(i+1 < n && nums[i]==nums[i+1]){
            if(isValid(nums, n, i+2, dp)==1){
                return dp[i] = 1;
            }
        }
        if(i+2 < n && nums[i]==nums[i+1] && nums[i+1]==nums[i+2]){
            if(isValid(nums, n, i+3, dp)==1){
                return dp[i] = 1;
            }
        }
        if(i+2 < n && nums[i+1]-nums[i]==1 && nums[i+2]-nums[i+1]==1){
            if(isValid(nums, n, i+3, dp)==1){
                return dp[i] = 1;
            }
        }

        return dp[i] = 0;
    }
}
