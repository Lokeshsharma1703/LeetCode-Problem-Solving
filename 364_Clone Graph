/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node==null){
            return null;
        }
        if(node.neighbors.size()==0){
            return new Node(node.val);
        }

        HashMap<Node, Node> mp = new HashMap<>();
        return dfs(node, mp);
    }

    private static Node dfs(Node node, HashMap<Node, Node> mp){
        List<Node> neighbors = new ArrayList<>();
        Node nn = new Node(node.val);
        mp.put(node, nn);

        for(Node ngbr : node.neighbors){
            if(mp.containsKey(ngbr)){
                neighbors.add(mp.get(ngbr));
            }
            else{
                neighbors.add(dfs(ngbr, mp));
            }
        }

        nn.neighbors = neighbors;
        return nn;
    }
}
