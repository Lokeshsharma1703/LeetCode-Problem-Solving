class Solution {
    private static int mod = 1000000007;

    public int numOfWays(int[] nums) {
        List<Integer> ls = new ArrayList<>();
        for(int num : nums){
            ls.add(num);
        }

        return countWays(ls)-1;
    }

    private static int countWays(List<Integer> ls){
        if(ls.size() <= 2){
            return 1;
        }

        List<Integer> lft = new ArrayList<>();
        List<Integer> rgt = new ArrayList<>();

        int root = ls.get(0);

        for(int i=1;i<ls.size();i++){
            if(ls.get(i)<root){
                lft.add(ls.get(i));
            }
            else{
                rgt.add(ls.get(i));
            }
        }

        int lcount = countWays(lft);
        int rcount = countWays(rgt);

        return (int)((combination(ls.size()-1, lft.size()) % mod) * (lcount % mod) % mod * (rcount % mod) % mod);
    }

    private static long combination(int n, int k){
        long[][] dp = new long[n+1][k+1];
        for(int i=0;i<=n;i++){
            dp[i][0] = 1;
            for(int j=1;j<=Math.min(i,k);j++){
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % mod;
            }
        }

        return dp[n][k];
    }
}
