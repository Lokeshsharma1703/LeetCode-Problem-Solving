class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        HashMap<String, HashMap<String, Double>> mp = new HashMap<>();

        for(int i=0; i<equations.size(); i++){
            String dividand = equations.get(i).get(0);
            String divisor = equations.get(i).get(1);
            double value = values[i];

            mp.putIfAbsent(dividand, new HashMap<>());
            mp.putIfAbsent(divisor, new HashMap<>());

            mp.get(dividand).put(divisor, value);
            mp.get(divisor).put(dividand, 1.0/value);
        }


        double[] res = new double[queries.size()];

        for(int i=0;i<queries.size(); i++){
            String dividand = queries.get(i).get(0);
            String divisor = queries.get(i).get(1);

            if(!mp.containsKey(dividand) || !mp.containsKey(divisor)){
                res[i] = -1.0;
            }
            else{
                HashSet<String> visited = new HashSet<>();
                double[] ans = {-1.0};
                double temp = 1.0;
                dfs(dividand, divisor, mp, visited, ans, temp);
                res[i] = ans[0];
            }
        }

        return res;
    }

    private static void dfs(String src, String des, HashMap<String, HashMap<String, Double>> mp, HashSet<String> visited, double[] ans, double temp){
        if(visited.contains(src)){
            return;
        }

        visited.add(src);

        if(src.equals(des)){
            ans[0] = temp;
            return;
        }

        for(Map.Entry<String, Double> entry : mp.get(src).entrySet()){
            String ngbr = entry.getKey();
            double value = entry.getValue();
            dfs(ngbr, des, mp, visited, ans, temp*value);
        }
    }
}
