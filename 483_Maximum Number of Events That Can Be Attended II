class Solution {
    public int maxValue(int[][] events, int k) {
        int n = events.length;
        int[][] dp = new int[n][k+1];
        Arrays.sort(events, (a, b) -> (a[0]-b[0]));

        return findMaxValue(events, n, 0, k, dp);
    }

    private static int findMaxValue(int[][] events, int n, int pos, int k, int[][] dp){
        if(pos==n || k==0){
            return 0;
        }

        if(dp[pos][k] != 0){
            return dp[pos][k];
        }

        int next = nextTake(events, events[pos][1], pos+1, n);
        int take = events[pos][2] + findMaxValue(events, n, next, k-1, dp);
        int nottake = findMaxValue(events, n, pos+1, k, dp);

        return dp[pos][k] = Math.max(take, nottake);
    }

    private static int nextTake(int[][] events, int last, int lo, int n){
        int hi = n-1;

        while(lo <= hi){
            int mid = (lo + hi)/2;
            if(events[mid][0] <= last){
                lo = mid+1;
            }
            else{
                hi = mid-1;
            }
        }

        return lo;
    }
}
