class Solution {
    public double knightProbability(int n, int k, int row, int column) {
        if(k==0){
            return 1;
        }
        double[][][] dp = new double[n][n][k+1];
        for(double[][] d2 : dp){
            for(double[] arr : d2){
                Arrays.fill(arr, -1);
            }
        }

        return findProb(n, k, row, column, dp);
    }

    private static double findProb(int n, int k, int r, int c, double[][][] dp){
        if(r<0 || r>=n || c<0 || c>=n){
            return 0;
        }

        if(k==0){
            return 1;
        }

        if(dp[r][c][k] != -1){
            return dp[r][c][k];
        }

        int[] row = {-1, -2, -2, -1,  1,  2,  2,  1};
        int[] col = {-2, -1,  1,  2,  2,  1, -1, -2};

        double prob = 0;
        for(int i=0; i<8; i++){
            prob += findProb(n, k-1, r+row[i], c+col[i], dp)/8.0;
        }

        return dp[r][c][k] = prob;
    }
}
