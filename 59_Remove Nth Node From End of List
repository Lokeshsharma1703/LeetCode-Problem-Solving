/*
 * @lc app=leetcode id=19 lang=java
 *
 * [19] Remove Nth Node From End of List
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int nodes = countNodes(head);
        if (n > nodes) {
            return null;
        }
        if (n == 1 && nodes == 1) {
            return null;
        }
        ListNode temp = head;
        int i;
        for (i = 1; i < nodes - n; i++) {
            temp = temp.next;
        }
        if (i > nodes - n) {
            head = head.next;
        } else if (temp.next.next == null) {
            temp.next = null;
        } else {
            temp.next = temp.next.next;
        }
        return head;
    }

    private static int countNodes(ListNode head) {
        int count = 0;
        ListNode temp = head;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        return count;
    }
}
// @lc code=end
