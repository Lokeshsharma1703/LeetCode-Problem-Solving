class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();

        Trie t = new Trie();
        for(String s : words){
            t.insert(s);
        }

        Trie.Node curr = t.root;

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                find(board, i, j, "", curr, res);
            }
        }

        return res;
    }

    private static void find(char[][] board, int i, int j, String s, Trie.Node root, List<String> res){
        if(root.isWord == true){
            res.add(new String(s));
            root.isWord = false;
        }

        if(i<0 || i>=board.length || j<0 || j>=board[0].length){
            return;
        }

        char ch = board[i][j];

        if(ch=='.' || !root.childs.containsKey(ch)){
            return;
        }

        root = root.childs.get(ch);

        String temp = s + ch;

        board[i][j] = '.';

        find(board, i+1, j, temp, root, res);
        find(board, i-1, j, temp, root, res);
        find(board, i, j+1, temp, root, res);
        find(board, i, j-1, temp, root, res);

        board[i][j] = ch;
    }
}

class Trie{
    static class Node{
        HashMap<Character, Node> childs = new HashMap<>();
        boolean isWord;
    }

    Node root;

    public Trie(){
        this.root = new Node();
    }

    public void insert(String word){
        Node curr = root;

        for(int i=0; i<word.length(); i++){
            char ch = word.charAt(i);

            if(!curr.childs.containsKey(ch)){
                curr.childs.put(ch, new Node());
            }
            curr = curr.childs.get(ch);
        }

        curr.isWord = true;
    }
}
