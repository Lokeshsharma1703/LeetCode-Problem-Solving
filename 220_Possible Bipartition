class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        int[][] graph = new int[n][n];
        for(int[] d:dislikes){
            graph[d[0]-1][d[1]-1] = 1;
            graph[d[1]-1][d[0]-1] = 1;
        }
        int[] group = new int[n];
        for(int i=0;i<n;i++){
            if(group[i]==0 && !dfs(graph, group, i, 1)){
                return false;
            }
        }
        return true;
    }
    private static boolean dfs(int[][] graph, int[] group, int idx, int g){
        group[idx] = g;
        for(int i=0;i<graph.length;i++){
            if(graph[idx][i]==1){
                if(group[i]==g){
                    return false;
                }
                if(group[i]==0 && !dfs(graph, group, i, -g)){
                    return false;
                }
            }
        }
        return true;
    }
}
