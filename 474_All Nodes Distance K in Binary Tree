/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<Integer, TreeNode> pc = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()){
            int size = q.size();

            for(int i=0; i<size; i++){
                TreeNode curr = q.poll();

                if(curr.left != null){
                    pc.put(curr.left.val, curr);
                    q.offer(curr.left);
                }

                if(curr.right != null){
                    pc.put(curr.right.val, curr);
                    q.offer(curr.right);
                }
            }
        }

        Set<Integer> visited = new HashSet<>();
        List<Integer> res = new ArrayList<>();
        q.offer(target);

        while(k > 0 && !q.isEmpty()){
            int size = q.size();

            for(int i=0; i<size; i++){
                TreeNode curr = q.poll();

                visited.add(curr.val);

                if(curr.left != null && !visited.contains(curr.left.val)){
                    q.offer(curr.left);
                }

                if(curr.right != null && !visited.contains(curr.right.val)){
                    q.offer(curr.right);
                }

                if(pc.containsKey(curr.val) && !visited.contains(pc.get(curr.val).val)){
                    q.offer(pc.get(curr.val));
                }
            }

            k--;
        }

        while(!q.isEmpty()){
            res.add(q.poll().val);
        }

        return res;
    }
}
