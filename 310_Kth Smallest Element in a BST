/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        helper(pq, root, k);
        return pq.peek();
    }
    private void helper(PriorityQueue<Integer> pq, TreeNode root, int k){
        if(root==null){
            return;
        }
        if(pq.size()<k){
            pq.add(root.val);
        }
        else if(root.val < pq.peek()){
            pq.poll();
            pq.add(root.val);
        }

        helper(pq, root.left, k);
        helper(pq, root.right, k);
    }
}


------------------------------------------------------------------------------------------------

class Solution {
    int count = 0;
    int res = 0;
    public int kthSmallest(TreeNode root, int k) {
        inOrder(root, k);
        return res;
    }
    private void inOrder(TreeNode root, int k){
        if(root==null){
            return;
        }
        inOrder(root.left, k);
        count++;
        if(count==k){
            res = root.val;
        }
        inOrder(root.right, k);
    }
}
