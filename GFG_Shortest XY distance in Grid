Give a N*M grid of characters 'O', 'X', and 'Y'. Find the minimum Manhattan distance between a X and a Y.

Manhattan Distance :
| row_index_x - row_index_y | + | column_index_x - column_index_y |


Example 1:

Input:
N = 4, M = 4
grid  = {{X, O, O, O}
         {O, Y, O, Y}
         {X, X, O, O}
         {O, Y, O, O}}
Output:
1
Explanation:
{{X, O, O, O}
{O, Y, O, Y}
{X, X, O, O}
{O, Y, O, O}}
The shortest X-Y distance in the grid is 1.
One possible such X and Y are marked in bold
in the above grid.
Example 2:

Input:
N = 3, M = 3
grid = {{X, X, O}
        {O, O, Y}
        {Y, O, O}}
Output :
2
Explanation:
{{X, X, O}
 {O, O, Y}
 {Y, O, O}}
The shortest X-Y distance in the grid is 2.
One possible such X and Y are marked in bold
in the above grid.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function shortestXYDist() which takes two integers N, and M and an 2D list of size N*M as input and returns the shortest Manhattan Distance between a X and a Y.

Expected Time Complexity: O(N*M)
Expected Auxiliary Space: O(N*M)


Constraints:
1 ≤ N*M ≤ 105 

There exists at least one 'X' and at least one 'Y' in the grid.


link - https://practice.geeksforgeeks.org/problems/7366ce450d84b55391fc787a681c4d60de359e72/1

---------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
    static int shortestXYDist(ArrayList<ArrayList<Character>> grid, int N, int M) {
        
        int res = Integer.MAX_VALUE;
        
        int[][] dp = new int[N][M];
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid.get(i).get(j)=='X'){
                    dp[i][j] = 0;
                }
                else{
                    dp[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid.get(i).get(j)=='X'){
                    continue;
                }
                
                int min = Integer.MAX_VALUE;
                if(i+1 < N){
                    min = Math.min(min, dp[i+1][j]);
                }
                if(i-1 >= 0){
                    min = Math.min(min, dp[i-1][j]);
                }
                if(j+1 < M){
                    min = Math.min(min, dp[i][j+1]);
                }
                if(j-1 >= 0){
                    min = Math.min(min, dp[i][j-1]);
                }
                
                if(min != Integer.MAX_VALUE){
                    dp[i][j] = min + 1;
                }
            }
        }
        
        
        for(int i=N-1;i>=0;i--){
            for(int j=M-1;j>=0;j--){
                if(grid.get(i).get(j)=='X'){
                    continue;
                }
                
                int min = Integer.MAX_VALUE;
                if(i+1 < N){
                    min = Math.min(min, dp[i+1][j]);
                }
                if(i-1 >= 0){
                    min = Math.min(min, dp[i-1][j]);
                }
                if(j+1 < M){
                    min = Math.min(min, dp[i][j+1]);
                }
                if(j-1 >= 0){
                    min = Math.min(min, dp[i][j-1]);
                }
                
                if(min != Integer.MAX_VALUE){
                    dp[i][j] = min + 1;
                }
            }
        }
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid.get(i).get(j)=='Y'){
                    res = Math.min(res, dp[i][j]);
                }
            }
        }
        
        return res;
        
    }
};
